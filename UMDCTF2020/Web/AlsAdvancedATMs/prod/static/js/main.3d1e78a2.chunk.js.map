{"version":3,"sources":["main/login.js","main/about.js","main/main-page.js","secret/secret.js","main/page-not-found.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","status","undefined","username","password","submitForm","bind","usernameChanged","passwordChanged","e","preventDefault","this","setState","setTimeout","removeStatus","target","value","Form","id","onSubmit","Label","Control","type","onChange","Button","variant","Component","About","MainPage","className","Secret","Table","PageNotFound","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAmDeA,G,kBA5Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,YAAQC,EAAWC,SAAU,GAAIC,SAAU,IACzD,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBALN,E,wEAQRG,GACTA,EAAEC,iBACFC,KAAKC,SAAS,CAACX,OAAQ,wBACvBU,KAAKC,SAAS,CAACT,SAAU,GAAIC,SAAU,KACvCS,WAAWF,KAAKG,aAAaR,KAAKK,MAAO,O,sCAG3BF,GACdE,KAAKC,SAAS,CAACT,SAAUM,EAAEM,OAAOC,U,sCAGpBP,GACdE,KAAKC,SAAS,CAACR,SAAUK,EAAEM,OAAOC,U,qCAIlCL,KAAKC,SAAS,CAACX,YAAQC,M,+BAIvB,OACE,6BACE,qDACA,kBAACe,EAAA,EAAD,CAAMC,GAAG,aAAaC,SAAUR,KAAKN,YACnC,kBAACY,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAON,MAAOL,KAAKX,MAAMG,SAAUoB,SAAUZ,KAAKJ,kBACrE,kBAACU,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWN,MAAOL,KAAKX,MAAMI,SAAUmB,SAAUZ,KAAKH,kBACzE,kBAACgB,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,UAA/B,WAEF,4BAAKX,KAAKX,MAAMC,a,GAxCJyB,cCKLC,MARf,WACE,OACE,6BACE,uVCSSC,MAVf,WACE,OACE,yBAAKC,UAAU,UACb,kBAAC,EAAD,MACA,kDACA,kBAAC,EAAD,Q,QC+BSC,MAtCf,WACE,OACE,yBAAKD,UAAU,UACb,qDACA,kBAACE,EAAA,EAAD,KACE,+BACE,4BACE,wCACA,0CAGJ,+BACE,4BACE,oCACA,yCAEF,4BACE,qCACA,yCAEF,4BACE,oCACA,6CAEF,4BACE,wCACA,qEAEF,4BACA,4CACA,iDCrBKC,MATf,WACE,OACE,yBAAKH,UAAU,UACb,mCACA,gDCcSI,MAZf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAS,KACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAWP,IAClC,kBAAC,IAAD,CAAOO,UAAWL,OCFNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d1e78a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './css/login.css';\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {status: undefined, username: '', password: ''}\n    this.submitForm = this.submitForm.bind(this)\n    this.usernameChanged = this.usernameChanged.bind(this);\n    this.passwordChanged = this.passwordChanged.bind(this);\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    this.setState({status: 'Invalid credentials'})\n    this.setState({username: '', password: ''})\n    setTimeout(this.removeStatus.bind(this), 2000)\n  }\n\n  usernameChanged(e) {\n    this.setState({username: e.target.value})\n  }\n\n  passwordChanged(e) {\n    this.setState({password: e.target.value})\n  }\n\n  removeStatus() {\n    this.setState({status: undefined})\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Login to your account</h3>\n        <Form id='login-form' onSubmit={this.submitForm}>\n          <Form.Label>Username</Form.Label>\n          <Form.Control type='text' value={this.state.username} onChange={this.usernameChanged}/>\n          <Form.Label>Password</Form.Label>\n          <Form.Control type='password' value={this.state.password} onChange={this.passwordChanged}/>\n          <Button variant='primary' type='submit'>Submit</Button>\n        </Form>\n        <h4>{this.state.status}</h4>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\n\nfunction About() {\n  return (\n    <div>\n      <p>Looking to add next gen security to your banking system? Looking to secure your money and your data? Well you're in lukc. Al's Advanced ATMs brings in a new era of ATM security that you've never seen before. With inpenetrable cryptography and state of the art security mechanisms, hackers don't stand a change.</p>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport Login from './login.js';\nimport About from './about.js';\n\nfunction MainPage() {\n  return (\n    <div className='center'>\n      <Login />\n      <h1>Al's Advanced ATMs</h1>\n      <About />\n    </div>\n  );\n}\n\nexport default MainPage;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nfunction Secret() {\n  return (\n    <div className='center'>\n      <h1>Super Secret Database</h1>\n      <Table>\n        <thead>\n          <tr>\n            <th>Username</th>\n            <th>Password</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>root</td>\n            <td>dG9vcg==</td>\n          </tr>\n          <tr>\n            <td>admin</td>\n            <td>YWRtaW4=</td>\n          </tr>\n          <tr>\n            <td>user</td>\n            <td>cGFzc3dvcmQ=</td>\n          </tr>\n          <tr>\n            <td>umd-csec</td>\n            <td>VU1EQ1RGLXtvcDNuX2RAdEBfYjY0X2JAZH0=</td>\n          </tr>\n          <tr>\n          <td>AzureDiamond</td>\n          <td>SHVudGVyMg==</td>\n          </tr>\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default Secret;\n","import React from 'react';\n\nfunction PageNotFound() {\n  return (\n    <div className='center'>\n      <h1>404</h1>\n      <h4>Page not found</h4>\n    </div>\n  );\n}\n\nexport default PageNotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from './main/main-page.js';\nimport Secret from './secret/secret.js';\nimport PageNotFound from './main/page-not-found.js';\n\nfunction App() {\n  return (\n    <BrowserRouter basename='/'>\n      <Switch>\n        <Route exact path=\"/\" component={MainPage} />\n        <Route path=\"/eonline\" component={Secret} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}