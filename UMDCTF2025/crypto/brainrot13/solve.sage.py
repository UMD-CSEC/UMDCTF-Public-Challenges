

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_96685821958083526684938680238271304286887980859392922334047044570819254535637534763165507014186569373580269436562287115575895071477094697751185058766474544708343165263644182297048851208627306861544906558700694910255483830223450427540731613986917757415247541102253686241820221043700623282515147528145504812161 = Integer(96685821958083526684938680238271304286887980859392922334047044570819254535637534763165507014186569373580269436562287115575895071477094697751185058766474544708343165263644182297048851208627306861544906558700694910255483830223450427540731613986917757415247541102253686241820221043700623282515147528145504812161); _sage_const_31415617614942980419493801728329478459882170524654275330189702271291172239569974917796230082992620119324013322311500280165046115132115888952730272833129650105740565501270236988682510607126061981801996717672566496111413558704046446132351270004211376270714769910968931266620926532143617027921568831958784579911 = Integer(31415617614942980419493801728329478459882170524654275330189702271291172239569974917796230082992620119324013322311500280165046115132115888952730272833129650105740565501270236988682510607126061981801996717672566496111413558704046446132351270004211376270714769910968931266620926532143617027921568831958784579911); _sage_const_72563774621694978528581466712845934115989091233025298416607646944054938010207983336599181951465053976617135146411342652500844040957885351294246597514830545442455636203961703603515841401653220929094734409672423770927867923227749902813163411103868690480354808090999202815188200468063383568781761012284874177390 = Integer(72563774621694978528581466712845934115989091233025298416607646944054938010207983336599181951465053976617135146411342652500844040957885351294246597514830545442455636203961703603515841401653220929094734409672423770927867923227749902813163411103868690480354808090999202815188200468063383568781761012284874177390); _sage_const_3 = Integer(3); _sage_const_13 = Integer(13); _sage_const_2 = Integer(2); _sage_const_119 = Integer(119); _sage_const_8 = Integer(8); _sage_const_118 = Integer(118); _sage_const_117 = Integer(117); _sage_const_116 = Integer(116); _sage_const_115 = Integer(115); _sage_const_114 = Integer(114); _sage_const_112 = Integer(112); _sage_const_92 = Integer(92); _sage_const_1 = Integer(1); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0)
import itertools
import codecs
from tqdm import tqdm
from Crypto.Util.number import bytes_to_long

n = _sage_const_96685821958083526684938680238271304286887980859392922334047044570819254535637534763165507014186569373580269436562287115575895071477094697751185058766474544708343165263644182297048851208627306861544906558700694910255483830223450427540731613986917757415247541102253686241820221043700623282515147528145504812161 
ct1 = _sage_const_31415617614942980419493801728329478459882170524654275330189702271291172239569974917796230082992620119324013322311500280165046115132115888952730272833129650105740565501270236988682510607126061981801996717672566496111413558704046446132351270004211376270714769910968931266620926532143617027921568831958784579911 
ct2 = _sage_const_72563774621694978528581466712845934115989091233025298416607646944054938010207983336599181951465053976617135146411342652500844040957885351294246597514830545442455636203961703603515841401653220929094734409672423770927867923227749902813163411103868690480354808090999202815188200468063383568781761012284874177390 


F = Zmod(n)
R = F['x']; (x,) = R._first_ngens(1)

orig = x**_sage_const_3  - ct1

# for the UMDCTF
base_diff = -_sage_const_13  * _sage_const_2 **(_sage_const_119 *_sage_const_8 ) + _sage_const_13  * _sage_const_2 **(_sage_const_118 *_sage_const_8 ) + _sage_const_13  * _sage_const_2 **(_sage_const_117 *_sage_const_8 ) + _sage_const_13  * _sage_const_2 **(_sage_const_116 *_sage_const_8 ) - _sage_const_13  * _sage_const_2 **(_sage_const_115 *_sage_const_8 ) + _sage_const_13  * _sage_const_2 **(_sage_const_114 *_sage_const_8 ) % n
active_diffs = [ _sage_const_2 **(i*_sage_const_8 ) for i in list(range(_sage_const_112 , _sage_const_92 ,-_sage_const_1 )) ]
k = _sage_const_20 

def poly_gcd(a, b): 
    return a.monic() if b == _sage_const_0  else poly_gcd(b, a % b)


for r in tqdm(itertools.product((-_sage_const_13 ,_sage_const_13 ), repeat=k), total=int(_sage_const_2 **k)):
    diff = (base_diff + sum([ a*b for a, b in zip(r, active_diffs)])) 
    if poly_gcd(orig, (x + diff)**_sage_const_3  - ct2) != _sage_const_1 :
        print(poly_gcd(orig, (x + diff)**_sage_const_3  - ct2))


