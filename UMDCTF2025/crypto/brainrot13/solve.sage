import itertools
import codecs
from tqdm import tqdm
from Crypto.Util.number import bytes_to_long

n = 96685821958083526684938680238271304286887980859392922334047044570819254535637534763165507014186569373580269436562287115575895071477094697751185058766474544708343165263644182297048851208627306861544906558700694910255483830223450427540731613986917757415247541102253686241820221043700623282515147528145504812161
ct1 = 31415617614942980419493801728329478459882170524654275330189702271291172239569974917796230082992620119324013322311500280165046115132115888952730272833129650105740565501270236988682510607126061981801996717672566496111413558704046446132351270004211376270714769910968931266620926532143617027921568831958784579911
ct2 = 72563774621694978528581466712845934115989091233025298416607646944054938010207983336599181951465053976617135146411342652500844040957885351294246597514830545442455636203961703603515841401653220929094734409672423770927867923227749902813163411103868690480354808090999202815188200468063383568781761012284874177390


F = Zmod(n)
R.<x> = F['x']

orig = x^3 - ct1

# for the UMDCTF
base_diff = -13 * 2**(119*8) + 13 * 2**(118*8) + 13 * 2**(117*8) + 13 * 2**(116*8) - 13 * 2**(115*8) + 13 * 2**(114*8) % n
active_diffs = [ 2**(i*8) for i in list(range(112, 92,-1)) ]
k = 20

def poly_gcd(a, b): 
    return a.monic() if b == 0 else poly_gcd(b, a % b)


for r in tqdm(itertools.product((-13,13), repeat=k), total=int(2**k)):
    diff = (base_diff + sum([ a*b for a, b in zip(r, active_diffs)])) 
    if poly_gcd(orig, (x + diff)^3 - ct2) != 1:
        print(poly_gcd(orig, (x + diff)^3 - ct2))

