from Crypto.Util.number import long_to_bytes, bytes_to_long
import math


n = 15771118503003695328921787595476872971332553656539138855140689254000162283812696271592233161714196348410017639383323550218226882003082095986861927085556718400009162207997470642604718235510546366969254547185913112595727303255934162695083943527489606305488043049979916421039297795232868699219576263557639018720136093931406766850549667666413605957445939200374366138785979859088497857572287771126533792799692647819083428444306282154498704619193769690941664142978940790185499414860190187709947712403978279464565536528199482530178705926515516245681617562507109643716316599325030002688220077275646476737259631076078700841843
e = 3
ct1 = 11039599840828056870258185407303698495569615390466959959237168883465345029139074019550703781534468100865129713063075765672204559404987026523378661396612370376681248557808222808121850652412596433185704911374743441231626024107927256824220209633724013022754500372074982468925149949366023164493712871222178593823058108326032035902851094814395336646655634945597062155341767259640966823034804608273441981258605235125098116523582462841206034187375003170172717043582029369904446640538710767861386642982626686442741961485100591346740881567859881421994483917994174042826015311393246562067930351915605986608423720721960745306561
ct2 = 4224766478551834287146283663177561668128890187024084547033468752773497321098581446491803432632757351689260550838289228690381659631469466275536626467948669183141112804077055124913671271978864963244200582513597894396333464607139167231614729660962655618969001126840345092018687510755958959999671908015935899334189530677411118565824389313136256436498155450863535115469721613379060493415276389795459036630567549010132242286651657594320371704883103830165266699010531018525080972568860441888085070539906050446999307800737228281614226965637116854415184009603551144053875755700602880950755202552676387150363743125742744602343

evolutions = [b'umbr', b'sylv', b'jolt', b'flar', b'glac', b'leaf']
all_diffs = [ bytes_to_long(a) - bytes_to_long(b) for b in evolutions for a in evolutions if a != b]


# adapted from https://github.com/yud121212/Coppersmith-s-Short-Pad-Attack-Franklin-Reiter-Related-Message-Attack/blob/master/coppersmiths_short_pad_attack.sage
def short_pad_attack(i, known_diff):
    PRxy.<x,y> = PolynomialRing(Zmod(n))
    PRx.<xn> = PolynomialRing(Zmod(n))
    PRZZ.<xz,yz> = PolynomialRing(Zmod(n))

    g1 = x^e - ct1
    g2 = (x+y+2^i * known_diff)^e - ct2

    q1 = g1.change_ring(PRZZ)
    q2 = g2.change_ring(PRZZ)


    h = q2.resultant(q1)
    h = h.univariate_polynomial()
    h = h.change_ring(PRx).subs(y=xn)
    h = h.monic()

    kbits = n.nbits()//(2*e*e)
    roots = h.small_roots(X=2^kbits, beta=0.5) 

    if roots == []:
        return -1
    else:
        return roots[0]

def fr(diff):
    R.<X> = Zmod(n)[]
    f1 = X^e - ct1
    f2 = (X + diff)^e - ct2
    g = polygcd(f1,f2).coefficients()[0]
    if g > 1:
        print(long_to_bytes(int(n-g)))


def polygcd(a, b):
    if(b == 0):
        return a.monic()
    else:
        return polygcd(b, a % b)

for i in range(8*14, 200*8, 8):
    print(i)
    for known_diff in all_diffs:
        diff = short_pad_attack(i, known_diff)
        if (diff != -1):
            print("found diff")
            fr(diff + 2^i * known_diff)
