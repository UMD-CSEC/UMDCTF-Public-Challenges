package ctf.malware.wtf.server.schema;

import com.google.common.io.Resources;
import io.quarkus.runtime.annotations.RegisterForReflection;
import org.apache.commons.imaging.ImageReadException;
import org.apache.commons.imaging.Imaging;
import org.jboss.logging.Logger;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Optional;

@RegisterForReflection
public final class Image {

    private static final Logger LOGGER = Logger.getLogger(Image.class);
    private final String path;
    private byte[] file;

    public Image(final String path) {
        this.path = path;
        doOpen();
    }

    private void doOpen() {
        try (InputStream is = Image.class.getClassLoader().getResourceAsStream(this.path)) {
            LOGGER.infof("opening file \"%s\"", this.path);
            LOGGER.infof("file = %s", is);
            if (is != null) {
                this.file = is.readAllBytes();
            }
        } catch (IOException e) {
            this.file = new byte[]{0};
            throw new RuntimeException(e);
        }
    }

    public Optional<BufferedImage> getImage() {
        if (this.file != null) {
            try {
                final BufferedImage bi = Imaging.getBufferedImage(this.file);
                return Optional.of(bi);
            } catch (ImageReadException | IOException ignored) {
            }
        }
        return Optional.empty();
    }

    public byte[] getBytes() {
        return this.file;
    }

    public Optional<ImageJson> json() {
        if (this.file != null) {
            ImageJson json = new ImageJson(this.file);
            return Optional.of(json);
        }
        return Optional.empty();
    }

}
