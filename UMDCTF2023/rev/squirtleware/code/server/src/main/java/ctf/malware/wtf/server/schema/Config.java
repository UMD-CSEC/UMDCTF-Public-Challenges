package ctf.malware.wtf.server.schema;

import org.eclipse.microprofile.config.ConfigProvider;

/**
 * Utility class for accessing {@code application.properties} configurations.
 */
public final class Config {

    /**
     * Internal configuration object.
     */
    private static final org.eclipse.microprofile.config.Config INTERNAL_CONFIG = ConfigProvider.getConfig();

    /**
     * Access to the config instance.
     */
    public static final Config CONFIG = new Config();

    /**
     * Field {@code restrictions.node} from application.properties.
     */
    private final int node = getInt("restrictions.node");

    /**
     * Field {@code restrictions.token_duration} from application.properties.
     */
    private final int tokenDuration = getIntDefault("restrictions.token_duration", 20);

    /**
     * Private constructor.
     */
    private Config() {
    }

    /**
     * Get string from internal configuration.
     * @param key the key of the string.
     * @return string value
     */
    public String getString(final String key) {
        return INTERNAL_CONFIG.getValue(key, String.class);
    }

    /**
     * Get int from internal configuration.
     * @param key the key of the string.
     * @return int value
     */
    public int getInt(final String key) {
        return INTERNAL_CONFIG.getValue(key, int.class);
    }

    /**
     * Get int from internal configuration.
     * @param key the key of the int.
     * @param defaultInt the default value
     * @return int value
     */
    public int getIntDefault(final String key, final int defaultInt) {
        int i = getInt(key);
        if (i == 0) {
            return defaultInt;
        }
        return i;
    }

    /**
     * Get the field {@link Config#node restrictions.node}.
     * @return node.
     */
    public int getNode() {
        return node;
    }

    /**
     * Get the field {@link Config#tokenDuration restrictions.token_duration}.
     * @return token duration.
     */
    public int getTokenDuration() {
        return tokenDuration;
    }
}
