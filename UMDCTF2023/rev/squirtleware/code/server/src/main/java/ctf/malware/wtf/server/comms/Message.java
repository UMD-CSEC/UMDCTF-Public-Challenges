package ctf.malware.wtf.server.comms;

import org.jboss.logging.Logger;
import org.jetbrains.annotations.NotNull;

import java.nio.charset.StandardCharsets;
import java.util.function.Function;

/**
 * The {@code Message} class outlines what a message object
 * before being sent to a client should inherit.
 */
public abstract class Message {

    protected static final Logger LOGGER = Logger.getLogger(Message.class);

    /**
     * Get message from string.
     * @param caller the caller for the type of message
     * @param string the content
     * @param <T>    type constraint
     * @return message
     */
    public static <T extends Message> T from(final Function<byte[], T> caller, final String string) {
        return caller.apply(string.getBytes(StandardCharsets.UTF_8));
    }

    /**
     * Get message from bytes.
     * @param caller the caller for the type of message
     * @param data   the content
     * @param <T>    type constraint
     * @return message
     */
    public static <T extends Message> T from(final Function<byte[], T> caller, final byte[] data) {
        return caller.apply(data);
    }

    /**
     * The message's data.
     */
    private final byte[] data;

    /**
     * Create a message with the specified byte-data.
     * @param data data.
     */
    public Message(final byte @NotNull [] data) {
        this.data = data;
    }

    /**
     * Get the message's {@link Message#data data}.
     * @return data (bytes).
     */
    public final byte[] getData() {
        return this.data;
    }

    /**
     * Turn the message's {@link Message#data data} into a string.
     * @return string.
     */
    @Override
    public final String toString() {
        if (data == null) {
            return "error!";
        }
        return new String(data);
    }

}
