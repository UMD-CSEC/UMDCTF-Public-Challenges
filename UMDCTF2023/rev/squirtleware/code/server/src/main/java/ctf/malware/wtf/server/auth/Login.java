package ctf.malware.wtf.server.auth;

import ctf.malware.wtf.server.service.SquirtleEngine;
import ctf.malware.wtf.server.schema.Token;
import ctf.malware.wtf.server.schema.User;
import io.quarkus.runtime.annotations.RegisterForReflection;
import io.vertx.core.json.Json;
import org.jboss.logging.Logger;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import static ctf.malware.wtf.server.schema.Config.CONFIG;

/**
 * The class {@code Login} is a class that manages the login route
 * in the REST api. The route is defined in the {@link Path @Path} annotation.
 */
@RegisterForReflection
@Path("/squirtle/i-love-shakira")
public final class Login {

    @Inject
    SquirtleEngine engine;

    /**
     * The class's logger.
     */
    private static final Logger LOGGER = Logger.getLogger(Login.class);

    /**
     * The handler for a login request.
     * Accepts JSON data, returns {@link Token token} in the form of JSON data.
     * @param user the user attempting to log in.
     * @return the token of the user.
     */
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response login(final User user) {
        if (user == null) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        }
        if (user.getNodeId() != CONFIG.getNode()) {
            LOGGER.infof(
                    "Failed login request from {\"%s\", %d}, expected {%d}",
                    user.getName(),
                    user.getNodeId(),
                    CONFIG.getNode()
            );
            // Lol
            return Response.status(Response.Status.UNAUTHORIZED).build();
        }
        LOGGER.infof("Successful login request from {\"%s\", %d}", user.getName(), user.getNodeId());
        Token token = engine.issue(user);
        return Response.ok(Json.encode(token)).build();
    }


}
