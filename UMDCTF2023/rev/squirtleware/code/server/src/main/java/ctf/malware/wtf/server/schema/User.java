package ctf.malware.wtf.server.schema;

import com.fasterxml.jackson.annotation.JsonProperty;
import ctf.malware.wtf.server.service.SquirtleEngine;
import io.quarkus.runtime.annotations.RegisterForReflection;
import org.apache.commons.lang3.time.DateUtils;
import org.jboss.logging.Logger;

import java.time.Instant;
import java.util.Date;
import java.util.Optional;

@RegisterForReflection
public class User {

    private static final Logger LOGGER = Logger.getLogger(User.class);

    public boolean update(final SquirtleEngine engine) {
        Optional<ActiveSessionUser> self = engine.findUser(this);
        Date time = Date.from(Instant.now());
        // User is registered
        if (self.isPresent()) {
            ActiveSessionUser u = self.get();
            LOGGER.infof("Found user {\"%s\", %d}", u.name, u.node);
            long expiry = u.getExpiry();
            // Time has surpassed expiry.
            if (time.getTime() > expiry) {
                this.expiry = DateUtils.addMinutes(time, Config.CONFIG.getTokenDuration()).getTime();
                return true;
            } else {
                // Set the expiry to the known expiry.
                this.expiry = expiry;
                return false;
            }
        }
        LOGGER.infof("Created expiry for user {\"%s\", %d}", this.name, this.node);
        // Add an expiry
        this.expiry = DateUtils.addMinutes(time, Config.CONFIG.getTokenDuration()).getTime();
        return false;
    }

    public static User from(final String name, final int id) {
        return new User(name, id);
    }

    /**
     * The user's name.
     * This name is the only thing actually needed in the database.
     */
    @JsonProperty
    public String name;

    /**
     * The identifier of the node, embedded in the distributed sample.
     * Must be as defined in the application's {@code application.properties}
     */
    @JsonProperty
    public int node;

    private long expiry;

    public User() {
    }

    public User(final String name, final int node) {
        this.name = name;
        this.node = node;
    }

    public String getName() {
        return name;
    }

    public int getNodeId() {
        return node;
    }

    public void setExpiry(final long expiry) {
        this.expiry = expiry;
    }

    public long getExpiry() {
        return expiry;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj instanceof User) {
            User user = (User) obj;
            return this.name.equalsIgnoreCase(user.name) && this.node == user.node;
        }
        return false;
    }

    @Override
    public int hashCode() {
        return name.hashCode() + node;
    }
}
