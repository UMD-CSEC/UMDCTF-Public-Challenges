package ctf.malware.wtf.server.schema;

import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;
import ctf.malware.wtf.server.service.SquirtleEngine;
import io.quarkus.runtime.annotations.RegisterForReflection;
import org.jetbrains.annotations.NotNull;

import javax.inject.Inject;
import java.time.Clock;

@RegisterForReflection
@JsonSerializableSchema
public final class Token {

    public static Token from(final String token) {
        return new Token(token);
    }

    public String token;

    public Token(final String token) {
        this.token = token;
    }

    public int getOwnerHash() {
        // String fmt = SquirtleEngine.TOKEN_FORMAT;
        // User is between [x].USER.[y].[z]
        String user = this.token.split("\\.")[1];
        return  user.hashCode();
    }

    @Override
    public int hashCode() {
        if (this.token == null) {
            return 0;
        }
        return this.token.hashCode();
    }

    @Inject
    public boolean valid(@NotNull final SquirtleEngine engine) {
        User user = engine.findUser(this.token);
        return Math.abs(user.getExpiry()) > Clock.systemUTC().millis();
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj instanceof Token || obj instanceof String) {
            return this.hashCode() == obj.hashCode();
        }
        return false;
    }

}
