import torch
from torch import nn

d = torch.FloatTensor([51.0,56.0,50.0,66.0,18.0,96.0,67.0,80.0,95.0,43.0,68.0,17.0,72.0,48.0,95.0,20.0,61.0,74.0,66.0,89.0,67.0,31.0,97.0,84.0,78.0,96.0,84.0,94.0,13.0,41.0,46.0,42.0,50.0,63.0,4.0,57.0,25.0,73.0,74.0,40.0,7.0,52.0,23.0,18.0,66.0,74.0,10.0,71.0,98.0,91.0,30.0,79.0,60.0,71.0,1.0,7.0,11.0,58.0,81.0,7.0,19.0,32.0,4.0,48.0,79.0,29.0,55.0,24.0,76.0,28.0,25.0,80.0,55.0,32.0,19.0,90.0,91.0,40.0,29.0,6.0,60.0,29.0,94.0,84.0,93.0,23.0,89.0,30.0,81.0,41.0,64.0,54.0,58.0,97.0,23.0,1.0,10.0,34.0,69.0,93.0,77.0,16.0,35.0,13.0,61.0,2.0,48.0,28.0,83.0,14.0,66.0,10.0,10.0,42.0,37.0,89.0,70.0,30.0,37.0,30.0,76.0,25.0,86.0,8.0,40.0,55.0,83.0,88.0,89.0,81.0,72.0,92.0,47.0,25.0,24.0,18.0,11.0,55.0,29.0,40.0,21.0,89.0,72.0,54.0,66.0,45.0,2.0,24.0,5.0,33.0,88.0,91.0,68.0,22.0,88.0,95.0,70.0,69.0,79.0,82.0,72.0,28.0,93.0,11.0,6.0,18.0,61.0,38.0,62.0,52.0,72.0,67.0,33.0,18.0,95.0,21.0,38.0,44.0,41.0,90.0,83.0,92.0,60.0,45.0,18.0,89.0,63.0,20.0,83.0,5.0,68.0,82.0,5.0,21.0,94.0,10.0,64.0,68.0,77.0,50.0,69.0,25.0,35.0,5.0,8.0,93.0,9.0,4.0,3.0,83.0,38.0,96.0,55.0,63.0,61.0,7.0,61.0,59.0,89.0,75.0,57.0,22.0,82.0,75.0,7.0,43.0,78.0,75.0,86.0,89.0,60.0,27.0,59.0,48.0,70.0,26.0,88.0,92.0,81.0,44.0,10.0,063.0,36.0,10.0,046.0,8.0,64.0,32.0,9.0,29.0,31.0,22.0,95.0,62.0,40.0,3.0,81.0,9.0,42.0,39.0,16.0,33.0,78.0,55.0,61.0,77.0,78.0,7.0,58.0,95.0,10.0,015.0,44.0,16.0,67.0,33.0,84.0,45.0,71.0,11.0,60.0,40.0,29.0,62.0,92.0,10.0,022.0,55.0,36.0,89.0,17.0,62.0,32.0,34.0,76.0,22.0,10.0,045.0,16.0,82.0,60.0,49.0,45.0,71.0,29.0,65.0,9.0,72.0,46.0,6.0,13.0,44.0,25.0,12.0,14.0,82.0,16.0,56.0,75.0,97.0,13.0,20.0,93.0,18.0,77.0,57.0,2.0,77.0,63.0,58.0,96.0,28.0,16.0,34.0,63.0,52.0,10.0,015.0,36.0,63.0,82.0,10.0,011.0,35.0,37.0,86.0,34.0,2.0,95.0,50.0,27.0,93.0,91.0,10.0,088.0,34.0,80.0,99.0,46.0,43.0,33.0,6.0,6.0,89.0,91.0,42.0,55.0,68.0,22.0,7.0,2.0,26.0,64.0,66.0,28.0,45.0,4.0,84.0,66.0,55.0,1.0,41.0,40.0,49.0,83.0,34.0,78.0,48.0,17.0,15.0,11.0,6.0,83.0,15.0,14.0,6.0,80.0,2.0,1.0,60.0,30.0,88.0,77.0,32.0,54.0,56.0,3.0,90.0,7.0,37.0,85.0,42.0,45.0,69.0,90.0,57.0,15.0,90.0,95.0,40.0])
target = torch.FloatTensor([85,77,68,67,84,70,123,105,95,108,111,118,101,95,114,101,118,118,105,110,103,95,116,111,114,99,104,95,98,105,110,97,114,105,101,115,33,125])

d = d.to("cuda")
target = target.to("cuda")
model = nn.Sequential(
    nn.Linear(420, 6969),
    nn.ReLU(),
    nn.Linear(6969, 3000),
    nn.Sigmoid(),
    nn.Linear(3000, 1337),
    nn.ReLU(),
    nn.Linear(1337, 8008),
    nn.ReLU(),
    nn.Linear(8008, 38),
    nn.ReLU()
)

model = model.to("cuda")

criterion = nn.MSELoss()
opt = torch.optim.RMSprop(model.parameters(), lr=0.001)
opt2 = torch.optim.RMSprop([d], lr=0.001)

for i in range(500000):
    opt.zero_grad()
    opt2.zero_grad()
    output = model(d)
    loss = criterion(output, target)
    loss.backward()
    opt.step()
    opt2.step()
    if loss < 0.001:
        torch.save(model.state_dict(), "out" + str(i))
        torch.save(d, "outd" + str(i))
        print(i, loss, output)
    if i % 100 == 0:
        print(i, loss)

