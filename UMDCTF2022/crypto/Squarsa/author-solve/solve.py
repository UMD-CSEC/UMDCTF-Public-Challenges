# There is a different QR code hidden on the r, g, and b planes of the given image. However, each of the QR codes are damaged in that their position and alignment blocks are blacked out (more info on QR code sections here [https://datagenetics.com/blog/november12013/index.html](https://datagenetics.com/blog/november12013/index.html) if you are unfamiliar with them). Once the QR codes are repaired you find that they give you three values. These values and title of the challenge should hint to using RSA decryption. However in this RSA problem, p equals q (or n = p^2) so the decryption process is slightly different.
from binascii import *

n = 33204131958697768983645132055121673722505389423356433517940784549522845862247753119763762851152728831801903988464448868633030391063459880399925668482944978099663533075403512510048839082784495322532627589909043419343997692484371259200819153404911450780750741325340108837898011346727334473683356844543838844231090033115578597150139430465777100713751826010910689293486611412107783668275303132487160364013851774175005377988660927935955533588369526082396204410675678657100466240626831735629932321623240282419998987770896972181993975862830638901115273644886983566546288413982000057494168217115421816409875540208749201270001178837273344481752492481719909469976973441514462180609496592207035855040057062000599760585475485584709458813639235336441119453381584640492301514883501726139299977618458112482771156154570052600933935386418012730346775014528488581353334012849528792000365931363671042261224668587243614537334313455760587359324841771744592541606065893888501421246650044859075361310024568333920823911211859026610349287840261632869755150279824725472450975861251841621038882291660404991638893060103073957330672370223360100007551816365564737217444163948449887908156217361213493466664310313749844208592526020048996321581599235391731676779630675827860047879894121068896348946496386869467563556941214109563333332016294910649283215193192764486642019245765118016154505561509297292234090031372322002896959848324844723848059235509326900135547662842175092636952927700977687349670045327293125834501930508519479313750138812054651609
p = 5762302661150121241837230499117557674374931638875547906796615545899260890701476271287632699387508807533572175849768325890570182560078368165717476819242581532418142819981483448242158220858340783891916086046549299057786107058946874203335937440321540247599439820272298821372513654670170709057542854677442010910038569560708999815299275107084955053807434383832644120901940929644127014373870228207831924141687486938642392974164271271341899334692375849712838757369538139533864918428902440240154412757857766924828660503864556205633071812346179983641226494189133213175031297086539502868189867762108421107760129627252787935133670093604318513739315472529347889006705053548849759777804617152579883728241257153814055497334035920405449490955123408111361069698851864551397
q = p
e = 65537
c =  31936172266938899691698118790905982731553680054673649963877231925433410457529074978648797906450817138043203542983244293889753566166822130228470048995341725857890873840712643596064307595628127374602553749751199486019125496523543703599626308021617040082301428342901036813331616759414341352459686215763542187945322839472442274687123594218575730291507828328468551739819141487668197574357744346043786395131356854598301624043560547908997530618328011990542370525415499104582366463397468819901601584419632621394829225403396146133712917832680600575026421617910821638195939299992195715824593644694759235855581318513259391246675781337988931189230797671745813307355589464524835724692586017392496017661364229975234264151445454799139518118587886552255023738965024508281337340116133147277628300742361189007055940823720714313309453051361699691920325261765112004105471559942319188592560539754506102727306342336122760823473307018323299930225596325055526431059304105754869574927947996784874570394158004161414486285518951026825877206936702187259038041517370725190769535635037510504191659102367148230926983370201090537156037965732933242252212854121640464315989482597164537511548250104269335555682945387116041059919254381550017447389717189883212232738692014998578378701377287450256594066697179249017656755908989969425714465113207480235855971588600609827658811612792891608006703499642138584619066908708896200503328511719228546854495961208954399407415213256877213805481464613151015905919950441007519391169661473416367370533638471589804826

def egcd(a, b):
    if a == 0:
        return (b,0,1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b//a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

phi = p*(q-1) 
d = modinv(e, phi)
x = hex(pow(c,d,n))[2:]
flag = bytes.fromhex(x).decode("ASCII")
print(flag)